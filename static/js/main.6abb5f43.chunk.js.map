{"version":3,"sources":["components/Question.js","components/Result.js","components/Quiz.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Question","_ref","question","onAnswerClick","_jsxs","className","children","_jsx","src","image","alt","options","map","option","index","onClick","answer","Result","score","total","Quiz","questions","setQuestions","useState","currentQuestionIndex","setCurrentQuestionIndex","setScore","showResult","setShowResult","useEffect","fetch","then","response","json","data","length","isCorrect","nextQuestionIndex","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","concat","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6abb5f43.chunk.js","sourcesContent":["import React from 'react';\nimport './Question.css';\n\nconst Question = ({ question, onAnswerClick }) => {\n  return (\n    <div className=\"question-container\">\n      <h2>{question.question}</h2>\n      <img src={question.image} alt=\"Illustration\" />\n      <div>\n        {question.options.map((option, index) => (\n          <button\n            key={index}\n            onClick={() => onAnswerClick(option === question.answer)}\n          >\n            {option}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Question;","import React from 'react';\n\nconst Result = ({ score, total }) => {\n  return (\n    <div>\n      <h2>Quiz Completed!</h2>\n      <p>Your Score: {score} / {total}</p>\n    </div>\n  );\n};\n\nexport default Result;","import React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport Result from './Result';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n\n  useEffect(() => {\n    fetch('https://soccer-quiz-app-backend-1adab9889c55.herokuapp.com/api/questions')\n      .then((response) => response.json())\n      .then((data) => setQuestions(data));\n  }, []);\n\n  const handleAnswerClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestionIndex = currentQuestionIndex + 1;\n    if (nextQuestionIndex < questions.length) {\n      setCurrentQuestionIndex(nextQuestionIndex);\n    } else {\n      setShowResult(true);\n    }\n  };\n\n  if (showResult) {\n    return <Result score={score} total={questions.length} />;\n  }\n\n  return (\n    <div>\n      {questions.length > 0 && (\n        <Question\n          question={questions[currentQuestionIndex]}\n          onAnswerClick={handleAnswerClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;","import React from 'react';\nimport Quiz from './components/Quiz';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Soccer Quiz</h1>\n        <Quiz />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Register the service worker\nserviceWorkerRegistration.register();\n\nreportWebVitals();"],"sourceRoot":""}